ARM GAS  /tmp/cchPtij1.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MX_ADC_Init,"ax",%progbits
  20              		.align	2
  21              		.global	MX_ADC_Init
  22              		.code	16
  23              		.thumb_func
  25              	MX_ADC_Init:
  26              	.LFB35:
  27              		.file 1 "Core/Src/adc.c"
   1:Core/Src/adc.c **** /**
   2:Core/Src/adc.c ****   ******************************************************************************
   3:Core/Src/adc.c ****   * File Name          : ADC.c
   4:Core/Src/adc.c ****   * Description        : This file provides code for the configuration
   5:Core/Src/adc.c ****   *                      of the ADC instances.
   6:Core/Src/adc.c ****   ******************************************************************************
   7:Core/Src/adc.c ****   * @attention
   8:Core/Src/adc.c ****   *
   9:Core/Src/adc.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Core/Src/adc.c ****   * All rights reserved.</center></h2>
  11:Core/Src/adc.c ****   *
  12:Core/Src/adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/adc.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/adc.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/adc.c ****   *
  17:Core/Src/adc.c ****   ******************************************************************************
  18:Core/Src/adc.c ****   */
  19:Core/Src/adc.c **** 
  20:Core/Src/adc.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/adc.c **** #include "adc.h"
  22:Core/Src/adc.c **** 
  23:Core/Src/adc.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/adc.c **** 
  25:Core/Src/adc.c **** /* USER CODE END 0 */
  26:Core/Src/adc.c **** 
  27:Core/Src/adc.c **** ADC_HandleTypeDef hadc;
  28:Core/Src/adc.c **** 
  29:Core/Src/adc.c **** /* ADC init function */
  30:Core/Src/adc.c **** void MX_ADC_Init(void)
  31:Core/Src/adc.c **** {
ARM GAS  /tmp/cchPtij1.s 			page 2


  28              		.loc 1 31 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  32:Core/Src/adc.c ****   ADC_ChannelConfTypeDef sConfig = {0};
  39              		.loc 1 32 0
  40 0004 0C22     		movs	r2, #12
  41 0006 0021     		movs	r1, #0
  42 0008 01A8     		add	r0, sp, #4
  43 000a FFF7FEFF 		bl	memset
  44              	.LVL0:
  33:Core/Src/adc.c **** 
  34:Core/Src/adc.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
  35:Core/Src/adc.c ****   */
  36:Core/Src/adc.c ****   hadc.Instance = ADC1;
  45              		.loc 1 36 0
  46 000e 1B48     		ldr	r0, .L5
  47 0010 1B4B     		ldr	r3, .L5+4
  48 0012 0360     		str	r3, [r0]
  37:Core/Src/adc.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  49              		.loc 1 37 0
  50 0014 0023     		movs	r3, #0
  51 0016 4360     		str	r3, [r0, #4]
  38:Core/Src/adc.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
  52              		.loc 1 38 0
  53 0018 8360     		str	r3, [r0, #8]
  39:Core/Src/adc.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  54              		.loc 1 39 0
  55 001a C360     		str	r3, [r0, #12]
  40:Core/Src/adc.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  56              		.loc 1 40 0
  57 001c 0122     		movs	r2, #1
  58 001e 0261     		str	r2, [r0, #16]
  41:Core/Src/adc.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  59              		.loc 1 41 0
  60 0020 0421     		movs	r1, #4
  61 0022 4161     		str	r1, [r0, #20]
  42:Core/Src/adc.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
  62              		.loc 1 42 0
  63 0024 8361     		str	r3, [r0, #24]
  43:Core/Src/adc.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
  64              		.loc 1 43 0
  65 0026 C361     		str	r3, [r0, #28]
  44:Core/Src/adc.c ****   hadc.Init.ContinuousConvMode = DISABLE;
  66              		.loc 1 44 0
  67 0028 0362     		str	r3, [r0, #32]
  45:Core/Src/adc.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
  68              		.loc 1 45 0
  69 002a 4362     		str	r3, [r0, #36]
  46:Core/Src/adc.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  /tmp/cchPtij1.s 			page 3


  70              		.loc 1 46 0
  71 002c C221     		movs	r1, #194
  72 002e FF31     		adds	r1, r1, #255
  73 0030 8162     		str	r1, [r0, #40]
  47:Core/Src/adc.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  74              		.loc 1 47 0
  75 0032 C362     		str	r3, [r0, #44]
  48:Core/Src/adc.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
  76              		.loc 1 48 0
  77 0034 0363     		str	r3, [r0, #48]
  49:Core/Src/adc.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  78              		.loc 1 49 0
  79 0036 4263     		str	r2, [r0, #52]
  50:Core/Src/adc.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
  80              		.loc 1 50 0
  81 0038 FFF7FEFF 		bl	HAL_ADC_Init
  82              	.LVL1:
  83 003c 0028     		cmp	r0, #0
  84 003e 01D0     		beq	.L2
  51:Core/Src/adc.c ****   {
  52:Core/Src/adc.c ****     Error_Handler();
  85              		.loc 1 52 0
  86 0040 FFF7FEFF 		bl	Error_Handler
  87              	.LVL2:
  88              	.L2:
  53:Core/Src/adc.c ****   }
  54:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted. 
  55:Core/Src/adc.c ****   */
  56:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_1;
  89              		.loc 1 56 0
  90 0044 0123     		movs	r3, #1
  91 0046 0193     		str	r3, [sp, #4]
  57:Core/Src/adc.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  92              		.loc 1 57 0
  93 0048 8023     		movs	r3, #128
  94 004a 5B01     		lsls	r3, r3, #5
  95 004c 0293     		str	r3, [sp, #8]
  58:Core/Src/adc.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  96              		.loc 1 58 0
  97 004e 8023     		movs	r3, #128
  98 0050 5B05     		lsls	r3, r3, #21
  99 0052 0393     		str	r3, [sp, #12]
  59:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 100              		.loc 1 59 0
 101 0054 01A9     		add	r1, sp, #4
 102 0056 0948     		ldr	r0, .L5
 103 0058 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 104              	.LVL3:
 105 005c 0028     		cmp	r0, #0
 106 005e 01D0     		beq	.L3
  60:Core/Src/adc.c ****   {
  61:Core/Src/adc.c ****     Error_Handler();
 107              		.loc 1 61 0
 108 0060 FFF7FEFF 		bl	Error_Handler
 109              	.LVL4:
 110              	.L3:
  62:Core/Src/adc.c ****   }
ARM GAS  /tmp/cchPtij1.s 			page 4


  63:Core/Src/adc.c ****   /** Configure for the selected ADC regular channel to be converted. 
  64:Core/Src/adc.c ****   */
  65:Core/Src/adc.c ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 111              		.loc 1 65 0
 112 0064 1023     		movs	r3, #16
 113 0066 0193     		str	r3, [sp, #4]
  66:Core/Src/adc.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 114              		.loc 1 66 0
 115 0068 01A9     		add	r1, sp, #4
 116 006a 0448     		ldr	r0, .L5
 117 006c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 118              	.LVL5:
 119 0070 0028     		cmp	r0, #0
 120 0072 01D0     		beq	.L1
  67:Core/Src/adc.c ****   {
  68:Core/Src/adc.c ****     Error_Handler();
 121              		.loc 1 68 0
 122 0074 FFF7FEFF 		bl	Error_Handler
 123              	.LVL6:
 124              	.L1:
  69:Core/Src/adc.c ****   }
  70:Core/Src/adc.c **** 
  71:Core/Src/adc.c **** }
 125              		.loc 1 71 0
 126 0078 05B0     		add	sp, sp, #20
 127              		@ sp needed
 128 007a 00BD     		pop	{pc}
 129              	.L6:
 130              		.align	2
 131              	.L5:
 132 007c 00000000 		.word	hadc
 133 0080 00240140 		.word	1073816576
 134              		.cfi_endproc
 135              	.LFE35:
 137              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 138              		.align	2
 139              		.global	HAL_ADC_MspInit
 140              		.code	16
 141              		.thumb_func
 143              	HAL_ADC_MspInit:
 144              	.LFB36:
  72:Core/Src/adc.c **** 
  73:Core/Src/adc.c **** void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
  74:Core/Src/adc.c **** {
 145              		.loc 1 74 0
 146              		.cfi_startproc
 147              		@ args = 0, pretend = 0, frame = 32
 148              		@ frame_needed = 0, uses_anonymous_args = 0
 149              	.LVL7:
 150 0000 10B5     		push	{r4, lr}
 151              	.LCFI2:
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 4, -8
 154              		.cfi_offset 14, -4
 155 0002 88B0     		sub	sp, sp, #32
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/cchPtij1.s 			page 5


 158 0004 0400     		movs	r4, r0
  75:Core/Src/adc.c **** 
  76:Core/Src/adc.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 159              		.loc 1 76 0
 160 0006 1422     		movs	r2, #20
 161 0008 0021     		movs	r1, #0
 162 000a 03A8     		add	r0, sp, #12
 163              	.LVL8:
 164 000c FFF7FEFF 		bl	memset
 165              	.LVL9:
  77:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 166              		.loc 1 77 0
 167 0010 2268     		ldr	r2, [r4]
 168 0012 104B     		ldr	r3, .L9
 169 0014 9A42     		cmp	r2, r3
 170 0016 1BD1     		bne	.L7
 171              	.LBB2:
  78:Core/Src/adc.c ****   {
  79:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 0 */
  80:Core/Src/adc.c **** 
  81:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 0 */
  82:Core/Src/adc.c ****     /* ADC1 clock enable */
  83:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_ENABLE();
 172              		.loc 1 83 0
 173 0018 0F4B     		ldr	r3, .L9+4
 174 001a 9969     		ldr	r1, [r3, #24]
 175 001c 8022     		movs	r2, #128
 176 001e 9200     		lsls	r2, r2, #2
 177 0020 1143     		orrs	r1, r2
 178 0022 9961     		str	r1, [r3, #24]
 179 0024 9969     		ldr	r1, [r3, #24]
 180 0026 0A40     		ands	r2, r1
 181 0028 0192     		str	r2, [sp, #4]
 182 002a 019A     		ldr	r2, [sp, #4]
 183              	.LBE2:
 184              	.LBB3:
  84:Core/Src/adc.c ****   
  85:Core/Src/adc.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 185              		.loc 1 85 0
 186 002c 5969     		ldr	r1, [r3, #20]
 187 002e 8022     		movs	r2, #128
 188 0030 9202     		lsls	r2, r2, #10
 189 0032 1143     		orrs	r1, r2
 190 0034 5961     		str	r1, [r3, #20]
 191 0036 5B69     		ldr	r3, [r3, #20]
 192 0038 1A40     		ands	r2, r3
 193 003a 0292     		str	r2, [sp, #8]
 194 003c 029B     		ldr	r3, [sp, #8]
 195              	.LBE3:
  86:Core/Src/adc.c ****     /**ADC GPIO Configuration    
  87:Core/Src/adc.c ****     PA1     ------> ADC_IN1 
  88:Core/Src/adc.c ****     */
  89:Core/Src/adc.c ****     GPIO_InitStruct.Pin = GPIO_PIN_1;
 196              		.loc 1 89 0
 197 003e 0223     		movs	r3, #2
 198 0040 0393     		str	r3, [sp, #12]
  90:Core/Src/adc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
ARM GAS  /tmp/cchPtij1.s 			page 6


 199              		.loc 1 90 0
 200 0042 0133     		adds	r3, r3, #1
 201 0044 0493     		str	r3, [sp, #16]
  91:Core/Src/adc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
  92:Core/Src/adc.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 202              		.loc 1 92 0
 203 0046 03A9     		add	r1, sp, #12
 204 0048 9020     		movs	r0, #144
 205 004a C005     		lsls	r0, r0, #23
 206 004c FFF7FEFF 		bl	HAL_GPIO_Init
 207              	.LVL10:
 208              	.L7:
  93:Core/Src/adc.c **** 
  94:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspInit 1 */
  95:Core/Src/adc.c **** 
  96:Core/Src/adc.c ****   /* USER CODE END ADC1_MspInit 1 */
  97:Core/Src/adc.c ****   }
  98:Core/Src/adc.c **** }
 209              		.loc 1 98 0
 210 0050 08B0     		add	sp, sp, #32
 211              		@ sp needed
 212              	.LVL11:
 213 0052 10BD     		pop	{r4, pc}
 214              	.L10:
 215              		.align	2
 216              	.L9:
 217 0054 00240140 		.word	1073816576
 218 0058 00100240 		.word	1073876992
 219              		.cfi_endproc
 220              	.LFE36:
 222              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 223              		.align	2
 224              		.global	HAL_ADC_MspDeInit
 225              		.code	16
 226              		.thumb_func
 228              	HAL_ADC_MspDeInit:
 229              	.LFB37:
  99:Core/Src/adc.c **** 
 100:Core/Src/adc.c **** void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
 101:Core/Src/adc.c **** {
 230              		.loc 1 101 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 0, uses_anonymous_args = 0
 234              	.LVL12:
 235 0000 10B5     		push	{r4, lr}
 236              	.LCFI4:
 237              		.cfi_def_cfa_offset 8
 238              		.cfi_offset 4, -8
 239              		.cfi_offset 14, -4
 102:Core/Src/adc.c **** 
 103:Core/Src/adc.c ****   if(adcHandle->Instance==ADC1)
 240              		.loc 1 103 0
 241 0002 0268     		ldr	r2, [r0]
 242 0004 064B     		ldr	r3, .L13
 243 0006 9A42     		cmp	r2, r3
 244 0008 09D1     		bne	.L11
ARM GAS  /tmp/cchPtij1.s 			page 7


 104:Core/Src/adc.c ****   {
 105:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 0 */
 106:Core/Src/adc.c **** 
 107:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 0 */
 108:Core/Src/adc.c ****     /* Peripheral clock disable */
 109:Core/Src/adc.c ****     __HAL_RCC_ADC1_CLK_DISABLE();
 245              		.loc 1 109 0
 246 000a 064A     		ldr	r2, .L13+4
 247 000c 9169     		ldr	r1, [r2, #24]
 248 000e 064B     		ldr	r3, .L13+8
 249 0010 0B40     		ands	r3, r1
 250 0012 9361     		str	r3, [r2, #24]
 110:Core/Src/adc.c ****   
 111:Core/Src/adc.c ****     /**ADC GPIO Configuration    
 112:Core/Src/adc.c ****     PA1     ------> ADC_IN1 
 113:Core/Src/adc.c ****     */
 114:Core/Src/adc.c ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 251              		.loc 1 114 0
 252 0014 0221     		movs	r1, #2
 253 0016 9020     		movs	r0, #144
 254              	.LVL13:
 255 0018 C005     		lsls	r0, r0, #23
 256 001a FFF7FEFF 		bl	HAL_GPIO_DeInit
 257              	.LVL14:
 258              	.L11:
 115:Core/Src/adc.c **** 
 116:Core/Src/adc.c ****   /* USER CODE BEGIN ADC1_MspDeInit 1 */
 117:Core/Src/adc.c **** 
 118:Core/Src/adc.c ****   /* USER CODE END ADC1_MspDeInit 1 */
 119:Core/Src/adc.c ****   }
 120:Core/Src/adc.c **** } 
 259              		.loc 1 120 0
 260              		@ sp needed
 261 001e 10BD     		pop	{r4, pc}
 262              	.L14:
 263              		.align	2
 264              	.L13:
 265 0020 00240140 		.word	1073816576
 266 0024 00100240 		.word	1073876992
 267 0028 FFFDFFFF 		.word	-513
 268              		.cfi_endproc
 269              	.LFE37:
 271              		.comm	hadc,76,4
 272              		.text
 273              	.Letext0:
 274              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 275              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 276              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
 277              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 278              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 279              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 280              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 281              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 282              		.file 10 "Core/Inc/main.h"
ARM GAS  /tmp/cchPtij1.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/cchPtij1.s:20     .text.MX_ADC_Init:0000000000000000 $t
     /tmp/cchPtij1.s:25     .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/cchPtij1.s:132    .text.MX_ADC_Init:000000000000007c $d
                            *COM*:000000000000004c hadc
     /tmp/cchPtij1.s:138    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cchPtij1.s:143    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cchPtij1.s:217    .text.HAL_ADC_MspInit:0000000000000054 $d
     /tmp/cchPtij1.s:223    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cchPtij1.s:228    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cchPtij1.s:265    .text.HAL_ADC_MspDeInit:0000000000000020 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
HAL_ADC_Init
Error_Handler
HAL_ADC_ConfigChannel
HAL_GPIO_Init
HAL_GPIO_DeInit
