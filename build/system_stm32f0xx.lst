ARM GAS  /tmp/ccTQuQ1I.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"system_stm32f0xx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SystemInit,"ax",%progbits
  20              		.align	2
  21              		.global	SystemInit
  22              		.code	16
  23              		.thumb_func
  25              	SystemInit:
  26              	.LFB35:
  27              		.file 1 "Core/Src/system_stm32f0xx.c"
   1:Core/Src/system_stm32f0xx.c **** /**
   2:Core/Src/system_stm32f0xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32f0xx.c ****   * @file    system_stm32f0xx.c
   4:Core/Src/system_stm32f0xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32f0xx.c ****   * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
   6:Core/Src/system_stm32f0xx.c ****   *
   7:Core/Src/system_stm32f0xx.c ****   * 1. This file provides two functions and one global variable to be called from
   8:Core/Src/system_stm32f0xx.c ****   *    user application:
   9:Core/Src/system_stm32f0xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Core/Src/system_stm32f0xx.c ****   *                      before branch to main program. This call is made inside
  11:Core/Src/system_stm32f0xx.c ****   *                      the "startup_stm32f0xx.s" file.
  12:Core/Src/system_stm32f0xx.c ****   *
  13:Core/Src/system_stm32f0xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Core/Src/system_stm32f0xx.c ****   *                                  by the user application to setup the SysTick
  15:Core/Src/system_stm32f0xx.c ****   *                                  timer or configure other parameters.
  16:Core/Src/system_stm32f0xx.c ****   *
  17:Core/Src/system_stm32f0xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Core/Src/system_stm32f0xx.c ****   *                                 be called whenever the core clock is changed
  19:Core/Src/system_stm32f0xx.c ****   *                                 during program execution.
  20:Core/Src/system_stm32f0xx.c ****   *
  21:Core/Src/system_stm32f0xx.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  22:Core/Src/system_stm32f0xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
  23:Core/Src/system_stm32f0xx.c ****   *    configure the system clock before to branch to main program.
  24:Core/Src/system_stm32f0xx.c ****   *
  25:Core/Src/system_stm32f0xx.c ****   * 3. This file configures the system clock as follows:
  26:Core/Src/system_stm32f0xx.c ****   *=============================================================================
  27:Core/Src/system_stm32f0xx.c ****   *                         Supported STM32F0xx device
  28:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  29:Core/Src/system_stm32f0xx.c ****   *        System Clock source                    | HSI
  30:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  31:Core/Src/system_stm32f0xx.c ****   *        SYSCLK(Hz)                             | 8000000
ARM GAS  /tmp/ccTQuQ1I.s 			page 2


  32:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  33:Core/Src/system_stm32f0xx.c ****   *        HCLK(Hz)                               | 8000000
  34:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  35:Core/Src/system_stm32f0xx.c ****   *        AHB Prescaler                          | 1
  36:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  37:Core/Src/system_stm32f0xx.c ****   *        APB1 Prescaler                         | 1
  38:Core/Src/system_stm32f0xx.c ****   *-----------------------------------------------------------------------------
  39:Core/Src/system_stm32f0xx.c ****   *=============================================================================
  40:Core/Src/system_stm32f0xx.c ****   ******************************************************************************
  41:Core/Src/system_stm32f0xx.c ****   * @attention
  42:Core/Src/system_stm32f0xx.c ****   *
  43:Core/Src/system_stm32f0xx.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  44:Core/Src/system_stm32f0xx.c ****   *
  45:Core/Src/system_stm32f0xx.c ****   * Redistribution and use in source and binary forms, with or without modification,
  46:Core/Src/system_stm32f0xx.c ****   * are permitted provided that the following conditions are met:
  47:Core/Src/system_stm32f0xx.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  48:Core/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer.
  49:Core/Src/system_stm32f0xx.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  50:Core/Src/system_stm32f0xx.c ****   *      this list of conditions and the following disclaimer in the documentation
  51:Core/Src/system_stm32f0xx.c ****   *      and/or other materials provided with the distribution.
  52:Core/Src/system_stm32f0xx.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  53:Core/Src/system_stm32f0xx.c ****   *      may be used to endorse or promote products derived from this software
  54:Core/Src/system_stm32f0xx.c ****   *      without specific prior written permission.
  55:Core/Src/system_stm32f0xx.c ****   *
  56:Core/Src/system_stm32f0xx.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  57:Core/Src/system_stm32f0xx.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  58:Core/Src/system_stm32f0xx.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  59:Core/Src/system_stm32f0xx.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  60:Core/Src/system_stm32f0xx.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  61:Core/Src/system_stm32f0xx.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  62:Core/Src/system_stm32f0xx.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  63:Core/Src/system_stm32f0xx.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  64:Core/Src/system_stm32f0xx.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  65:Core/Src/system_stm32f0xx.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:Core/Src/system_stm32f0xx.c ****   *
  67:Core/Src/system_stm32f0xx.c ****   ******************************************************************************
  68:Core/Src/system_stm32f0xx.c ****   */
  69:Core/Src/system_stm32f0xx.c **** 
  70:Core/Src/system_stm32f0xx.c **** /** @addtogroup CMSIS
  71:Core/Src/system_stm32f0xx.c ****   * @{
  72:Core/Src/system_stm32f0xx.c ****   */
  73:Core/Src/system_stm32f0xx.c **** 
  74:Core/Src/system_stm32f0xx.c **** /** @addtogroup stm32f0xx_system
  75:Core/Src/system_stm32f0xx.c ****   * @{
  76:Core/Src/system_stm32f0xx.c ****   */
  77:Core/Src/system_stm32f0xx.c **** 
  78:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Includes
  79:Core/Src/system_stm32f0xx.c ****   * @{
  80:Core/Src/system_stm32f0xx.c ****   */
  81:Core/Src/system_stm32f0xx.c **** 
  82:Core/Src/system_stm32f0xx.c **** #include "stm32f0xx.h"
  83:Core/Src/system_stm32f0xx.c **** 
  84:Core/Src/system_stm32f0xx.c **** /**
  85:Core/Src/system_stm32f0xx.c ****   * @}
  86:Core/Src/system_stm32f0xx.c ****   */
  87:Core/Src/system_stm32f0xx.c **** 
  88:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
ARM GAS  /tmp/ccTQuQ1I.s 			page 3


  89:Core/Src/system_stm32f0xx.c ****   * @{
  90:Core/Src/system_stm32f0xx.c ****   */
  91:Core/Src/system_stm32f0xx.c **** 
  92:Core/Src/system_stm32f0xx.c **** /**
  93:Core/Src/system_stm32f0xx.c ****   * @}
  94:Core/Src/system_stm32f0xx.c ****   */
  95:Core/Src/system_stm32f0xx.c **** 
  96:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Defines
  97:Core/Src/system_stm32f0xx.c ****   * @{
  98:Core/Src/system_stm32f0xx.c ****   */
  99:Core/Src/system_stm32f0xx.c **** #if !defined  (HSE_VALUE) 
 100:Core/Src/system_stm32f0xx.c ****   #define HSE_VALUE    ((uint32_t)8000000) /*!< Default value of the External oscillator in Hz.
 101:Core/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 102:Core/Src/system_stm32f0xx.c **** #endif /* HSE_VALUE */
 103:Core/Src/system_stm32f0xx.c **** 
 104:Core/Src/system_stm32f0xx.c **** #if !defined  (HSI_VALUE)
 105:Core/Src/system_stm32f0xx.c ****   #define HSI_VALUE    ((uint32_t)8000000) /*!< Default value of the Internal oscillator in Hz.
 106:Core/Src/system_stm32f0xx.c ****                                                 This value can be provided and adapted by the user 
 107:Core/Src/system_stm32f0xx.c **** #endif /* HSI_VALUE */
 108:Core/Src/system_stm32f0xx.c **** 
 109:Core/Src/system_stm32f0xx.c **** #if !defined (HSI48_VALUE)
 110:Core/Src/system_stm32f0xx.c **** #define HSI48_VALUE    ((uint32_t)48000000) /*!< Default value of the HSI48 Internal oscillator in 
 111:Core/Src/system_stm32f0xx.c ****                                                  This value can be provided and adapted by the user
 112:Core/Src/system_stm32f0xx.c **** #endif /* HSI48_VALUE */
 113:Core/Src/system_stm32f0xx.c **** /**
 114:Core/Src/system_stm32f0xx.c ****   * @}
 115:Core/Src/system_stm32f0xx.c ****   */
 116:Core/Src/system_stm32f0xx.c **** 
 117:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Macros
 118:Core/Src/system_stm32f0xx.c ****   * @{
 119:Core/Src/system_stm32f0xx.c ****   */
 120:Core/Src/system_stm32f0xx.c **** 
 121:Core/Src/system_stm32f0xx.c **** /**
 122:Core/Src/system_stm32f0xx.c ****   * @}
 123:Core/Src/system_stm32f0xx.c ****   */
 124:Core/Src/system_stm32f0xx.c **** 
 125:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Variables
 126:Core/Src/system_stm32f0xx.c ****   * @{
 127:Core/Src/system_stm32f0xx.c ****   */
 128:Core/Src/system_stm32f0xx.c ****   /* This variable is updated in three ways:
 129:Core/Src/system_stm32f0xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 130:Core/Src/system_stm32f0xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 131:Core/Src/system_stm32f0xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 132:Core/Src/system_stm32f0xx.c ****          Note: If you use this function to configure the system clock there is no need to
 133:Core/Src/system_stm32f0xx.c ****                call the 2 first functions listed above, since SystemCoreClock variable is 
 134:Core/Src/system_stm32f0xx.c ****                updated automatically.
 135:Core/Src/system_stm32f0xx.c ****   */
 136:Core/Src/system_stm32f0xx.c **** uint32_t SystemCoreClock = 8000000;
 137:Core/Src/system_stm32f0xx.c **** 
 138:Core/Src/system_stm32f0xx.c **** const uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 139:Core/Src/system_stm32f0xx.c **** const uint8_t APBPrescTable[8]  = {0, 0, 0, 0, 1, 2, 3, 4};
 140:Core/Src/system_stm32f0xx.c **** 
 141:Core/Src/system_stm32f0xx.c **** /**
 142:Core/Src/system_stm32f0xx.c ****   * @}
 143:Core/Src/system_stm32f0xx.c ****   */
 144:Core/Src/system_stm32f0xx.c **** 
 145:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
ARM GAS  /tmp/ccTQuQ1I.s 			page 4


 146:Core/Src/system_stm32f0xx.c ****   * @{
 147:Core/Src/system_stm32f0xx.c ****   */
 148:Core/Src/system_stm32f0xx.c **** 
 149:Core/Src/system_stm32f0xx.c **** /**
 150:Core/Src/system_stm32f0xx.c ****   * @}
 151:Core/Src/system_stm32f0xx.c ****   */
 152:Core/Src/system_stm32f0xx.c **** 
 153:Core/Src/system_stm32f0xx.c **** /** @addtogroup STM32F0xx_System_Private_Functions
 154:Core/Src/system_stm32f0xx.c ****   * @{
 155:Core/Src/system_stm32f0xx.c ****   */
 156:Core/Src/system_stm32f0xx.c **** 
 157:Core/Src/system_stm32f0xx.c **** /**
 158:Core/Src/system_stm32f0xx.c ****   * @brief  Setup the microcontroller system.
 159:Core/Src/system_stm32f0xx.c ****   *         Initialize the default HSI clock source, vector table location and the PLL configuratio
 160:Core/Src/system_stm32f0xx.c ****   * @param  None
 161:Core/Src/system_stm32f0xx.c ****   * @retval None
 162:Core/Src/system_stm32f0xx.c ****   */
 163:Core/Src/system_stm32f0xx.c **** void SystemInit(void)
 164:Core/Src/system_stm32f0xx.c **** {
  28              		.loc 1 164 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 165:Core/Src/system_stm32f0xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 166:Core/Src/system_stm32f0xx.c ****   /* Set HSION bit */
 167:Core/Src/system_stm32f0xx.c ****   RCC->CR |= (uint32_t)0x00000001U;
  33              		.loc 1 167 0
  34 0000 114B     		ldr	r3, .L2
  35 0002 1A68     		ldr	r2, [r3]
  36 0004 0121     		movs	r1, #1
  37 0006 0A43     		orrs	r2, r1
  38 0008 1A60     		str	r2, [r3]
 168:Core/Src/system_stm32f0xx.c **** 
 169:Core/Src/system_stm32f0xx.c **** #if defined (STM32F051x8) || defined (STM32F058x8)
 170:Core/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
 171:Core/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 172:Core/Src/system_stm32f0xx.c **** #else
 173:Core/Src/system_stm32f0xx.c ****   /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
 174:Core/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0x08FFB80CU;
  39              		.loc 1 174 0
  40 000a 5868     		ldr	r0, [r3, #4]
  41 000c 0F4A     		ldr	r2, .L2+4
  42 000e 0240     		ands	r2, r0
  43 0010 5A60     		str	r2, [r3, #4]
 175:Core/Src/system_stm32f0xx.c **** #endif /* STM32F051x8 or STM32F058x8 */
 176:Core/Src/system_stm32f0xx.c ****   
 177:Core/Src/system_stm32f0xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 178:Core/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFFU;
  44              		.loc 1 178 0
  45 0012 1868     		ldr	r0, [r3]
  46 0014 0E4A     		ldr	r2, .L2+8
  47 0016 0240     		ands	r2, r0
  48 0018 1A60     		str	r2, [r3]
 179:Core/Src/system_stm32f0xx.c **** 
 180:Core/Src/system_stm32f0xx.c ****   /* Reset HSEBYP bit */
 181:Core/Src/system_stm32f0xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFFU;
ARM GAS  /tmp/ccTQuQ1I.s 			page 5


  49              		.loc 1 181 0
  50 001a 1868     		ldr	r0, [r3]
  51 001c 0D4A     		ldr	r2, .L2+12
  52 001e 0240     		ands	r2, r0
  53 0020 1A60     		str	r2, [r3]
 182:Core/Src/system_stm32f0xx.c **** 
 183:Core/Src/system_stm32f0xx.c ****   /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 184:Core/Src/system_stm32f0xx.c ****   RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
  54              		.loc 1 184 0
  55 0022 5868     		ldr	r0, [r3, #4]
  56 0024 0C4A     		ldr	r2, .L2+16
  57 0026 0240     		ands	r2, r0
  58 0028 5A60     		str	r2, [r3, #4]
 185:Core/Src/system_stm32f0xx.c **** 
 186:Core/Src/system_stm32f0xx.c ****   /* Reset PREDIV[3:0] bits */
 187:Core/Src/system_stm32f0xx.c ****   RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
  59              		.loc 1 187 0
  60 002a DA6A     		ldr	r2, [r3, #44]
  61 002c 0F20     		movs	r0, #15
  62 002e 8243     		bics	r2, r0
  63 0030 DA62     		str	r2, [r3, #44]
 188:Core/Src/system_stm32f0xx.c **** 
 189:Core/Src/system_stm32f0xx.c **** #if defined (STM32F072xB) || defined (STM32F078xx)
 190:Core/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 191:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 192:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F071xB)
 193:Core/Src/system_stm32f0xx.c ****   /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 194:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
 195:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F091xC) || defined (STM32F098xx)
 196:Core/Src/system_stm32f0xx.c ****   /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 197:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 198:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038
 199:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
 200:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
  64              		.loc 1 200 0
  65 0032 186B     		ldr	r0, [r3, #48]
  66 0034 094A     		ldr	r2, .L2+20
  67 0036 0240     		ands	r2, r0
  68 0038 1A63     		str	r2, [r3, #48]
 201:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F051x8) || defined (STM32F058xx)
 202:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
 203:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 204:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F042x6) || defined (STM32F048xx)
 205:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
 206:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 207:Core/Src/system_stm32f0xx.c **** #elif defined (STM32F070x6) || defined (STM32F070xB)
 208:Core/Src/system_stm32f0xx.c ****   /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
 209:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 210:Core/Src/system_stm32f0xx.c ****   /* Set default USB clock to PLLCLK, since there is no HSI48 */
 211:Core/Src/system_stm32f0xx.c ****   RCC->CFGR3 |= (uint32_t)0x00000080U;  
 212:Core/Src/system_stm32f0xx.c **** #else
 213:Core/Src/system_stm32f0xx.c ****  #warning "No target selected"
 214:Core/Src/system_stm32f0xx.c **** #endif
 215:Core/Src/system_stm32f0xx.c **** 
 216:Core/Src/system_stm32f0xx.c ****   /* Reset HSI14 bit */
 217:Core/Src/system_stm32f0xx.c ****   RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
  69              		.loc 1 217 0
ARM GAS  /tmp/ccTQuQ1I.s 			page 6


  70 003a 5A6B     		ldr	r2, [r3, #52]
  71 003c 8A43     		bics	r2, r1
  72 003e 5A63     		str	r2, [r3, #52]
 218:Core/Src/system_stm32f0xx.c **** 
 219:Core/Src/system_stm32f0xx.c ****   /* Disable all interrupts */
 220:Core/Src/system_stm32f0xx.c ****   RCC->CIR = 0x00000000U;
  73              		.loc 1 220 0
  74 0040 0022     		movs	r2, #0
  75 0042 9A60     		str	r2, [r3, #8]
 221:Core/Src/system_stm32f0xx.c **** 
 222:Core/Src/system_stm32f0xx.c **** }
  76              		.loc 1 222 0
  77              		@ sp needed
  78 0044 7047     		bx	lr
  79              	.L3:
  80 0046 C046     		.align	2
  81              	.L2:
  82 0048 00100240 		.word	1073876992
  83 004c 0CB8FF08 		.word	150976524
  84 0050 FFFFF6FE 		.word	-17367041
  85 0054 FFFFFBFF 		.word	-262145
  86 0058 FFFFC0FF 		.word	-4128769
  87 005c ECFEFFFF 		.word	-276
  88              		.cfi_endproc
  89              	.LFE35:
  91              		.global	__aeabi_uidiv
  92              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  93              		.align	2
  94              		.global	SystemCoreClockUpdate
  95              		.code	16
  96              		.thumb_func
  98              	SystemCoreClockUpdate:
  99              	.LFB36:
 223:Core/Src/system_stm32f0xx.c **** 
 224:Core/Src/system_stm32f0xx.c **** /**
 225:Core/Src/system_stm32f0xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 226:Core/Src/system_stm32f0xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 227:Core/Src/system_stm32f0xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 228:Core/Src/system_stm32f0xx.c ****   *         other parameters.
 229:Core/Src/system_stm32f0xx.c ****   *
 230:Core/Src/system_stm32f0xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 231:Core/Src/system_stm32f0xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 232:Core/Src/system_stm32f0xx.c ****   *         based on this variable will be incorrect.
 233:Core/Src/system_stm32f0xx.c ****   *
 234:Core/Src/system_stm32f0xx.c ****   * @note   - The system frequency computed by this function is not the real
 235:Core/Src/system_stm32f0xx.c ****   *           frequency in the chip. It is calculated based on the predefined
 236:Core/Src/system_stm32f0xx.c ****   *           constant and the selected clock source:
 237:Core/Src/system_stm32f0xx.c ****   *
 238:Core/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 239:Core/Src/system_stm32f0xx.c ****   *
 240:Core/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 241:Core/Src/system_stm32f0xx.c ****   *
 242:Core/Src/system_stm32f0xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 243:Core/Src/system_stm32f0xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 244:Core/Src/system_stm32f0xx.c ****   *
 245:Core/Src/system_stm32f0xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 246:Core/Src/system_stm32f0xx.c ****   *             8 MHz) but the real value may vary depending on the variations
ARM GAS  /tmp/ccTQuQ1I.s 			page 7


 247:Core/Src/system_stm32f0xx.c ****   *             in voltage and temperature.
 248:Core/Src/system_stm32f0xx.c ****   *
 249:Core/Src/system_stm32f0xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f0xx_hal.h file (default value
 250:Core/Src/system_stm32f0xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 251:Core/Src/system_stm32f0xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 252:Core/Src/system_stm32f0xx.c ****   *              have wrong result.
 253:Core/Src/system_stm32f0xx.c ****   *
 254:Core/Src/system_stm32f0xx.c ****   *         - The result of this function could be not correct when using fractional
 255:Core/Src/system_stm32f0xx.c ****   *           value for HSE crystal.
 256:Core/Src/system_stm32f0xx.c ****   *
 257:Core/Src/system_stm32f0xx.c ****   * @param  None
 258:Core/Src/system_stm32f0xx.c ****   * @retval None
 259:Core/Src/system_stm32f0xx.c ****   */
 260:Core/Src/system_stm32f0xx.c **** void SystemCoreClockUpdate (void)
 261:Core/Src/system_stm32f0xx.c **** {
 100              		.loc 1 261 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104 0000 10B5     		push	{r4, lr}
 105              	.LCFI0:
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 4, -8
 108              		.cfi_offset 14, -4
 109              	.LVL0:
 262:Core/Src/system_stm32f0xx.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 263:Core/Src/system_stm32f0xx.c **** 
 264:Core/Src/system_stm32f0xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 265:Core/Src/system_stm32f0xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 110              		.loc 1 265 0
 111 0002 1E4B     		ldr	r3, .L12
 112 0004 5B68     		ldr	r3, [r3, #4]
 113 0006 0C22     		movs	r2, #12
 114 0008 1340     		ands	r3, r2
 115              	.LVL1:
 266:Core/Src/system_stm32f0xx.c **** 
 267:Core/Src/system_stm32f0xx.c ****   switch (tmp)
 116              		.loc 1 267 0
 117 000a 042B     		cmp	r3, #4
 118 000c 07D0     		beq	.L6
 119 000e 082B     		cmp	r3, #8
 120 0010 09D0     		beq	.L7
 121 0012 002B     		cmp	r3, #0
 122 0014 22D1     		bne	.L11
 268:Core/Src/system_stm32f0xx.c ****   {
 269:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
 270:Core/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 123              		.loc 1 270 0
 124 0016 1A4A     		ldr	r2, .L12+4
 125 0018 1A4B     		ldr	r3, .L12+8
 126              	.LVL2:
 127 001a 1A60     		str	r2, [r3]
 271:Core/Src/system_stm32f0xx.c ****       break;
 128              		.loc 1 271 0
 129 001c 21E0     		b	.L9
 130              	.LVL3:
 131              	.L6:
ARM GAS  /tmp/ccTQuQ1I.s 			page 8


 272:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
 273:Core/Src/system_stm32f0xx.c ****       SystemCoreClock = HSE_VALUE;
 132              		.loc 1 273 0
 133 001e 184A     		ldr	r2, .L12+4
 134 0020 184B     		ldr	r3, .L12+8
 135              	.LVL4:
 136 0022 1A60     		str	r2, [r3]
 274:Core/Src/system_stm32f0xx.c ****       break;
 137              		.loc 1 274 0
 138 0024 1DE0     		b	.L9
 139              	.LVL5:
 140              	.L7:
 275:Core/Src/system_stm32f0xx.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
 276:Core/Src/system_stm32f0xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 277:Core/Src/system_stm32f0xx.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 141              		.loc 1 277 0
 142 0026 154B     		ldr	r3, .L12
 143              	.LVL6:
 144 0028 5C68     		ldr	r4, [r3, #4]
 145              	.LVL7:
 278:Core/Src/system_stm32f0xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 146              		.loc 1 278 0
 147 002a 5A68     		ldr	r2, [r3, #4]
 148 002c 8020     		movs	r0, #128
 149 002e 4002     		lsls	r0, r0, #9
 150 0030 0240     		ands	r2, r0
 151              	.LVL8:
 279:Core/Src/system_stm32f0xx.c ****       pllmull = ( pllmull >> 18) + 2;
 152              		.loc 1 279 0
 153 0032 A40C     		lsrs	r4, r4, #18
 154              	.LVL9:
 155 0034 0F21     		movs	r1, #15
 156 0036 0C40     		ands	r4, r1
 157 0038 0234     		adds	r4, r4, #2
 158              	.LVL10:
 280:Core/Src/system_stm32f0xx.c ****       predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 159              		.loc 1 280 0
 160 003a DB6A     		ldr	r3, [r3, #44]
 161 003c 1940     		ands	r1, r3
 162 003e 0131     		adds	r1, r1, #1
 163              	.LVL11:
 281:Core/Src/system_stm32f0xx.c **** 
 282:Core/Src/system_stm32f0xx.c ****       if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 164              		.loc 1 282 0
 165 0040 8242     		cmp	r2, r0
 166 0042 06D1     		bne	.L10
 283:Core/Src/system_stm32f0xx.c ****       {
 284:Core/Src/system_stm32f0xx.c ****         /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
 285:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 167              		.loc 1 285 0
 168 0044 0E48     		ldr	r0, .L12+4
 169 0046 FFF7FEFF 		bl	__aeabi_uidiv
 170              	.LVL12:
 171 004a 4443     		muls	r4, r0
 172              	.LVL13:
 173 004c 0D4B     		ldr	r3, .L12+8
 174 004e 1C60     		str	r4, [r3]
ARM GAS  /tmp/ccTQuQ1I.s 			page 9


 175 0050 07E0     		b	.L9
 176              	.LVL14:
 177              	.L10:
 286:Core/Src/system_stm32f0xx.c ****       }
 287:Core/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) ||
 288:Core/Src/system_stm32f0xx.c ****       else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 289:Core/Src/system_stm32f0xx.c ****       {
 290:Core/Src/system_stm32f0xx.c ****         /* HSI48 used as PLL clock source : SystemCoreClock = HSI48/PREDIV * PLLMUL */
 291:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 292:Core/Src/system_stm32f0xx.c ****       }
 293:Core/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F072xB || STM32F078xx || STM32F091xC || STM32F098xx */
 294:Core/Src/system_stm32f0xx.c ****       else
 295:Core/Src/system_stm32f0xx.c ****       {
 296:Core/Src/system_stm32f0xx.c **** #if defined(STM32F042x6) || defined(STM32F048xx)  || defined(STM32F070x6) \
 297:Core/Src/system_stm32f0xx.c ****  || defined(STM32F078xx) || defined(STM32F071xB)  || defined(STM32F072xB) \
 298:Core/Src/system_stm32f0xx.c ****  || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx)  || defined(STM32F030xC)
 299:Core/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/PREDIV * PLLMUL */
 300:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 301:Core/Src/system_stm32f0xx.c **** #else
 302:Core/Src/system_stm32f0xx.c ****         /* HSI used as PLL clock source : SystemCoreClock = HSI/2 * PLLMUL */
 303:Core/Src/system_stm32f0xx.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 178              		.loc 1 303 0
 179 0052 0D48     		ldr	r0, .L12+12
 180 0054 4443     		muls	r4, r0
 181              	.LVL15:
 182 0056 0B4B     		ldr	r3, .L12+8
 183 0058 1C60     		str	r4, [r3]
 184 005a 02E0     		b	.L9
 185              	.LVL16:
 186              	.L11:
 304:Core/Src/system_stm32f0xx.c **** #endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
 305:Core/Src/system_stm32f0xx.c ****           STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
 306:Core/Src/system_stm32f0xx.c ****           STM32F091xC || STM32F098xx || STM32F030xC */
 307:Core/Src/system_stm32f0xx.c ****       }
 308:Core/Src/system_stm32f0xx.c ****       break;
 309:Core/Src/system_stm32f0xx.c ****     default: /* HSI used as system clock */
 310:Core/Src/system_stm32f0xx.c ****       SystemCoreClock = HSI_VALUE;
 187              		.loc 1 310 0
 188 005c 084A     		ldr	r2, .L12+4
 189 005e 094B     		ldr	r3, .L12+8
 190              	.LVL17:
 191 0060 1A60     		str	r2, [r3]
 192              	.LVL18:
 193              	.L9:
 311:Core/Src/system_stm32f0xx.c ****       break;
 312:Core/Src/system_stm32f0xx.c ****   }
 313:Core/Src/system_stm32f0xx.c ****   /* Compute HCLK clock frequency ----------------*/
 314:Core/Src/system_stm32f0xx.c ****   /* Get HCLK prescaler */
 315:Core/Src/system_stm32f0xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 194              		.loc 1 315 0
 195 0062 064B     		ldr	r3, .L12
 196 0064 5B68     		ldr	r3, [r3, #4]
 197 0066 1B09     		lsrs	r3, r3, #4
 198 0068 0F22     		movs	r2, #15
 199 006a 1340     		ands	r3, r2
 200 006c 074A     		ldr	r2, .L12+16
 201 006e D35C     		ldrb	r3, [r2, r3]
ARM GAS  /tmp/ccTQuQ1I.s 			page 10


 202              	.LVL19:
 316:Core/Src/system_stm32f0xx.c ****   /* HCLK clock frequency */
 317:Core/Src/system_stm32f0xx.c ****   SystemCoreClock >>= tmp;
 203              		.loc 1 317 0
 204 0070 044A     		ldr	r2, .L12+8
 205 0072 1168     		ldr	r1, [r2]
 206 0074 D940     		lsrs	r1, r1, r3
 207 0076 1160     		str	r1, [r2]
 318:Core/Src/system_stm32f0xx.c **** }
 208              		.loc 1 318 0
 209              		@ sp needed
 210 0078 10BD     		pop	{r4, pc}
 211              	.L13:
 212 007a C046     		.align	2
 213              	.L12:
 214 007c 00100240 		.word	1073876992
 215 0080 00127A00 		.word	8000000
 216 0084 00000000 		.word	.LANCHOR0
 217 0088 00093D00 		.word	4000000
 218 008c 00000000 		.word	.LANCHOR1
 219              		.cfi_endproc
 220              	.LFE36:
 222              		.global	APBPrescTable
 223              		.global	AHBPrescTable
 224              		.global	SystemCoreClock
 225              		.section	.rodata.AHBPrescTable,"a",%progbits
 226              		.align	2
 227              		.set	.LANCHOR1,. + 0
 230              	AHBPrescTable:
 231 0000 00       		.byte	0
 232 0001 00       		.byte	0
 233 0002 00       		.byte	0
 234 0003 00       		.byte	0
 235 0004 00       		.byte	0
 236 0005 00       		.byte	0
 237 0006 00       		.byte	0
 238 0007 00       		.byte	0
 239 0008 01       		.byte	1
 240 0009 02       		.byte	2
 241 000a 03       		.byte	3
 242 000b 04       		.byte	4
 243 000c 06       		.byte	6
 244 000d 07       		.byte	7
 245 000e 08       		.byte	8
 246 000f 09       		.byte	9
 247              		.section	.rodata.APBPrescTable,"a",%progbits
 248              		.align	2
 251              	APBPrescTable:
 252 0000 00       		.byte	0
 253 0001 00       		.byte	0
 254 0002 00       		.byte	0
 255 0003 00       		.byte	0
 256 0004 01       		.byte	1
 257 0005 02       		.byte	2
 258 0006 03       		.byte	3
 259 0007 04       		.byte	4
 260              		.section	.data.SystemCoreClock,"aw",%progbits
ARM GAS  /tmp/ccTQuQ1I.s 			page 11


 261              		.align	2
 262              		.set	.LANCHOR0,. + 0
 265              	SystemCoreClock:
 266 0000 00127A00 		.word	8000000
 267              		.text
 268              	.Letext0:
 269              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 270              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 271              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x6.h"
ARM GAS  /tmp/ccTQuQ1I.s 			page 12


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f0xx.c
     /tmp/ccTQuQ1I.s:20     .text.SystemInit:0000000000000000 $t
     /tmp/ccTQuQ1I.s:25     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccTQuQ1I.s:82     .text.SystemInit:0000000000000048 $d
     /tmp/ccTQuQ1I.s:93     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccTQuQ1I.s:98     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccTQuQ1I.s:214    .text.SystemCoreClockUpdate:000000000000007c $d
     /tmp/ccTQuQ1I.s:251    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccTQuQ1I.s:230    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccTQuQ1I.s:265    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccTQuQ1I.s:226    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccTQuQ1I.s:248    .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccTQuQ1I.s:261    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
